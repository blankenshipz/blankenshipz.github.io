<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://blankenshipz.com</link>
    <description>
      Reverie's on programming and life
    </description>
    
        
            <item>
                <title>Contained Crustaceans</title>
                <link>http://blankenshipz.com/docker/rust/2017/08/12/contained-crustaceans/</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="http://www.rustacean.net/">Ferris</a> the crab is a <a href="https://www.britannica.com/animal/crustacean">crustacean</a> and  <a href="https://blog.docker.com/2013/10/call-me-moby-dock/">Moby Dock</a>, the whale, is a mammal. These mascots are both marine life and they share the moniker of “cartoon” - putting them in an interesting subcategory where it might benefit them to stick together! Let’s spend a few minutes bringing them even closer together as we discuss setting up a development environment in <a href="https://www.docker.com/"><code class="highlighter-rouge">Docker</code></a>  for building applications in the <a href="rust-lang.org"><code class="highlighter-rouge">Rust</code></a> programming language.</p>

<h4 id="environmental-concerns">Environmental Concerns</h4>
<p>I’ve been using versions of the <code class="highlighter-rouge">Docker</code> toolchain in development for a few years now<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>, and overall I’ve enjoyed the experience. It’s a great way to create a consistent environment for your application (and your peers). When I first started developing with <code class="highlighter-rouge">ruby</code> it was common practice to use something like <a href="https://rvm.io/"><code class="highlighter-rouge">rvm</code></a> or <a href="https://github.com/rbenv/rbenv"><code class="highlighter-rouge">rbenv</code></a> to contextually switch <code class="highlighter-rouge">ruby</code> versions based on some configuration in the application. The <code class="highlighter-rouge">rust</code> community has something similair with <a href="https://github.com/rust-lang-nursery/rustup.rs"><code class="highlighter-rouge">rustup</code></a><sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> it provides a way to switch<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> the version of <code class="highlighter-rouge">rust</code> so that the application can be appropriatly compiled with the intended version of the compiler.</p>

<p>Although this type of context switching can be extremely useful it is unlikely that the compiler version is the <em>only</em> thing your application will rely on in its build environment as it matures. You may also have some specific package or file dependency like: <code class="highlighter-rouge">openssh</code>, <code class="highlighter-rouge">curl</code>, <code class="highlighter-rouge">libssh2</code> or a file named <code class="highlighter-rouge">foo</code> and while many systems might meet these dependencies, and perhaps you can easily<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup> facilitate them in your development environment, <a href="https://en.wikipedia.org/wiki/Murphy%27s_law">Murphy’s Law</a> tells us that your coworker and <a href="https://www.thoughtworks.com/continuous-integration">CI server</a> are going to flounder.</p>

<h4 id="much-ado-about-docker">Much Ado About Docker</h4>
<p><code class="highlighter-rouge">Docker</code> or more specifically “containerization” is the trending solution to this problem and with good reason. Think of a “running” container as an executing instance of your application passing the cycles sheltered from the whims and woes of other processes and attached to a filesystem that meets its wildest dreams. It’s the pack up your stuff and live your days on a beach version of the process lifecycle.<sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup></p>

<h4 id="my-container-is-rusting">My Container is Rusting…</h4>
<p>We can containerize <code class="highlighter-rouge">rust</code> applications to reep the benefits of our beach life (hopefully without the sand) and to do so all we really need is a <code class="highlighter-rouge">Dockerfile</code><sup id="fnref:6"><a href="#fn:6" class="footnote">6</a></sup>. If you haven’t installed <code class="highlighter-rouge">Docker</code> yet take a second to <a href="https://docs.docker.com/engine/installation/">visit the docs</a> for installation instructions for your system.</p>

<p>There are several prebuilt images for rust available on the <a href="https://hub.docker.com/search/?isAutomated=0&amp;isOfficial=0&amp;page=1&amp;pullCount=0&amp;q=rust&amp;starCount=0">DockerHub</a> to choose from however <a href="https://github.com/docker-library/official-images/pull/3273">fairly recently</a> an official<sup id="fnref:7"><a href="#fn:7" class="footnote">7</a></sup> <a href="https://hub.docker.com/_/rust/">image</a> has been released by the <code class="highlighter-rouge">rust</code> community. The following <code class="highlighter-rouge">Dockerfile</code> is built <code class="highlighter-rouge">FROM</code> the official <code class="highlighter-rouge">rust</code><sup id="fnref:8"><a href="#fn:8" class="footnote">8</a></sup> image.</p>

<pre><code class="language-Dockerfile">FROM rust

# Creating a directory to work from
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Copy our app into that directory
COPY . /usr/src/app

# Build our app
CMD ["cargo", "build"]
</code></pre>

<p>This <code class="highlighter-rouge">Dockerfile</code> is elegant in its simplicity; it uses the <code class="highlighter-rouge">rust</code> image as its base, it copies over our code and its default command is to build our application. Lets put it through its paces by setting up a new application for development:</p>

<ol>
  <li>Drop the <code class="highlighter-rouge">Dockerfile</code> into an empty directory</li>
  <li>Build the image and tag it with a name we can use to reference it later:
 <code class="highlighter-rouge">docker build -t my-rust-app-image .</code></li>
  <li>Once the image is built create a new project with <code class="highlighter-rouge">cargo</code> (in the current directory):
    <div class="language-sh highlighter-rouge"><pre class="highlight"><code> docker run <span class="se">\</span>
   --rm <span class="se">\ </span>                                 <span class="c"># declutter!</span>
   -e <span class="nv">USER</span><span class="o">=</span><span class="s1">'Super Dev'</span> <span class="se">\ </span>                  <span class="c"># an env var for cargo init</span>
   my-rust-app-image <span class="se">\ </span>                    <span class="c"># Our image name</span>
   cargo init --bin --name the-best-app-rs <span class="c"># Override default command</span>
</code></pre>
    </div>
  </li>
</ol>

<p>If you do this you’ll notice that the command seems to execute succesfully but when you check the filesystem there are <strong>no new files</strong> created. This is because the files that we created with <code class="highlighter-rouge">cargo</code> were created during the fleeting existance of the container and existed only within its filesystem. In order to persist the files on the host filesystem we need to mount the host filesystem into the container with a <a href="https://docs.docker.com/engine/admin/volumes/volumes/"><code class="highlighter-rouge">volume</code></a>.</p>

<p>Our new command looks like this:</p>

<div class="language-sh highlighter-rouge"><pre class="highlight"><code>docker run <span class="se">\</span>
  --rm <span class="se">\</span>
  -e <span class="nv">USER</span><span class="o">=</span><span class="s1">'Super Dev'</span> <span class="se">\</span>
  -v <span class="nv">$PWD</span>:/usr/src/app     <span class="c"># Special Sauce; mount the host working directory</span>
  my-rust-app-image <span class="se">\</span>
  cargo init --bin --name the-best-app-rs
</code></pre>
</div>

<p>And now running it produces the desired effect, we have initialized a new <code class="highlighter-rouge">cargo</code> project in the current working directory on the host machine.</p>

<h4 id="composed-crustaceans">Composed C<strong>rust</strong>aceans</h4>
<p>We could continue to develop our application with <code class="highlighter-rouge">docker run</code> but our command is a bit tedious to say the least. <a href="https://docs.docker.com/compose/"><code class="highlighter-rouge">Docker Compose</code></a> solves this problem for us: it abstracts the <code class="highlighter-rouge">run</code> command so that we can deal with a much more agreeable <code class="highlighter-rouge">YAML</code> file. Let’s add a <code class="highlighter-rouge">docker-compose.yml</code> to our new project:</p>

<div class="language-yml highlighter-rouge"><pre class="highlight"><code><span class="s">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.0'</span>

<span class="s">services</span><span class="pi">:</span>
  <span class="s">bin</span><span class="pi">:</span>
    <span class="s">build</span><span class="pi">:</span>
      <span class="s">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="s">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
    <span class="s">command</span><span class="pi">:</span> <span class="s">cargo test</span>
    <span class="s">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/usr/src/app</span>
      <span class="pi">-</span> <span class="s">registry:/root/.cargo/registry</span> <span class="c1"># Secret Sauce</span>

<span class="s">volumes</span><span class="pi">:</span>
  <span class="s">registry</span><span class="pi">:</span>
    <span class="s">driver</span><span class="pi">:</span> <span class="s">local</span>
</code></pre>
</div>

<p>Now with this configuration<sup id="fnref:9"><a href="#fn:9" class="footnote">9</a></sup> in place we can execute:</p>

<div class="language-sh highlighter-rouge"><pre class="highlight"><code>docker-compose run --rm bin
</code></pre>
</div>

<p>and a container will start based on our image and <code class="highlighter-rouge">cargo test</code> will run the tests for our application; this is great for our development cycle because <code class="highlighter-rouge">cargo test</code> will <code class="highlighter-rouge">build</code> our application if there have been any changes since the last build and because <em>we’re definitley writing tests</em> and we want them to run as well. Once the the container has finished the daemon will cleanup the container because we passed the <code class="highlighter-rouge">--rm</code> flag.<sup id="fnref:10"><a href="#fn:10" class="footnote">10</a></sup></p>

<h4 id="extra-special-sauce">Extra Special Sauce</h4>
<p>You’ll notice in the <code class="highlighter-rouge">docker-compose.yml</code> above that we add a volume that gets mounted into the container at <code class="highlighter-rouge">/root/.cargo/registry</code>; this is where <code class="highlighter-rouge">cargo</code> stores <code class="highlighter-rouge">crates</code><sup id="fnref:11"><a href="#fn:11" class="footnote">11</a></sup> our application depends on.</p>

<p>Adding a volume here rather then adding a <code class="highlighter-rouge">cargo build</code> layer<sup id="fnref:12"><a href="#fn:12" class="footnote">12</a></sup> to the <code class="highlighter-rouge">Dockerfile</code> prevents us from needing to rebuild the image after each change to the <code class="highlighter-rouge">Cargo.toml</code>. We can continue to develop normally and when <code class="highlighter-rouge">cargo</code> installs a new <code class="highlighter-rouge">crate</code> it will be cached for us in the <code class="highlighter-rouge">registry</code> volume.</p>

<h4 id="fini">fini</h4>
<p>Now that we’re done we have a <code class="highlighter-rouge">Dockerfile</code> that describes the filesystem our application needs and a <code class="highlighter-rouge">docker-compose.yml</code> that helps us by adding some nifty cacheing and mounting our working directory into the container so that we can see our code changes in real time. There’s definitley some work that can be done to make this better (maybe <code class="highlighter-rouge">cargo test</code> is a better default command for the image) but it’s a decent start and our process can begin to enjoy its new digs.</p>

<p>The example files can be found here: <a href="https://github.com/blankenshipz/docker-rust-example">blankenshipz/docker-rust-example</a></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>The community has come a long way! <code class="highlighter-rouge">boot2docker</code>, <code class="highlighter-rouge">dinghy</code> and now <a href="https://www.docker.com/docker-mac"><code class="highlighter-rouge">Docker For Mac</code></a>&nbsp;<a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><code class="highlighter-rouge">rustup</code> <a href="https://github.com/rust-lang-nursery/rustup.rs#how-rustup-works">refers</a> to these sorts of utilities as “toolchain multiplexers”&nbsp;<a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>The switch can occur as a result of a user command, an environment variable, or a file: <code class="highlighter-rouge">.rustup-toolchain</code>. For a complete list <a href="https://github.com/rust-lang-nursery/rustup.rs#override-precedence">see the docs</a>&nbsp;<a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><code class="highlighter-rouge">touch foo</code>&nbsp;<a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>If you’re interested in how <code class="highlighter-rouge">Docker</code> creates/runs containers take a look at <a href="https://github.com/opencontainers/runc"><code class="highlighter-rouge">runc</code></a>: my current understanding is that the main parameters to <code class="highlighter-rouge">runc</code> are as simple as a “command” and a filesystem. It does the heavy lifting of process isoloation/namespacing.&nbsp;<a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p>The Dockerfile <a href="https://docs.docker.com/engine/reference/builder/">Reference</a> and <a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/">Best Practices</a> are excellent resources to learn more about crafting images.&nbsp;<a href="#fnref:6" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:7">
      <p>You can learn more about “official” images <a href="https://docs.docker.com/docker-hub/official_repos/">here</a>&nbsp;<a href="#fnref:7" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:8">
      <p>Typically the authors of docker images attempt to shrink the size of the image if at all possible, rather then using the <code class="highlighter-rouge">rust</code> image here which is currently based on <code class="highlighter-rouge">debian</code> an alternative would be to use the minimalist distro <code class="highlighter-rouge">alpine</code> - according to <a href="https://github.com/andrew-d/docker-rust-musl/issues/7">this issue</a> it should be possible to now install <code class="highlighter-rouge">rust</code> directly from the <code class="highlighter-rouge">alpine</code> package manger.&nbsp;<a href="#fnref:8" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:9">
      <p>You may have noticed that I choose <code class="highlighter-rouge">bin</code> as the name of our service; I’ve found that it’s best when moving between projects to keep the names of services conventional and because <code class="highlighter-rouge">cargo</code> uses the terminology <code class="highlighter-rouge">bin</code> and <code class="highlighter-rouge">lib</code> I’ve found that those are the best names to use in a <code class="highlighter-rouge">cargo </code>project.&nbsp;<a href="#fnref:9" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:10">
      <p>Cleaning up is important here because each time we issue a <code class="highlighter-rouge">docker run</code> a <strong>new</strong> container is created, if we dont’ remove it we’ll end up with a bunch of orphaned containers on our system.&nbsp;<a href="#fnref:10" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:11">
      <p>A <code class="highlighter-rouge">crate</code> much like a <code class="highlighter-rouge">gem</code> in <code class="highlighter-rouge">ruby</code> is an external library, check out <a href="https://crates.io">crates.io</a> for more information.&nbsp;<a href="#fnref:11" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:12">
      <p>A <code class="highlighter-rouge">Docker</code> “image” is a Union Filesystem where each of the statements in the <code class="highlighter-rouge">Dockerfile</code> create a <code class="highlighter-rouge">layer</code> and any changes at a specific <code class="highlighter-rouge">layer</code> invalidate the following layers requiring new layers to be created for that part of the image. <a href="https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/">Here is a much better explanation</a>&nbsp;<a href="#fnref:12" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/docker/rust/2017/08/12/contained-crustaceans/</guid>
                <description>
                    
                    Setting up a development environment with docker for rust
                    
                </description>
                <pubDate>Sat, 12 Aug 2017 13:28:00 -0700</pubDate>
                <author>Zach Blankenship</author>
            </item>
        
    
  </channel>
</rss>
